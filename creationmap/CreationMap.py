# -*- coding: utf-8 -*-
"""
/***************************************************************************
 CreationMap
                                 A QGIS plugin
 Density population map creation by region
 Generated by Plugin Builder: http://g-sherman.github.io/Qgis-Plugin-Builder/
                              -------------------
        begin                : 2023-12-18
        git sha              : $Format:%H$
        copyright            : (C) 2023 by Althéa Feuillet
        email                : althea.feuillet@gmail.com
 ***************************************************************************/

/***************************************************************************
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; either version 2 of the License, or     *
 *   (at your option) any later version.                                   *
 *                                                                         *
 ***************************************************************************/
"""
from qgis.PyQt.QtCore import QSettings, QTranslator, QCoreApplication
from qgis.PyQt.QtGui import QIcon
from qgis.PyQt.QtWidgets import QAction, QFileDialog, QMessageBox
from qgis.core import (QgsVectorLayer, QgsProject, QgsCoordinateReferenceSystem)

from .CreateDensity import CreateDensity
from .Affichage import Affichage
from .Centroides import Centroides

# Initialize Qt resources from file resources.py
from .resources import *
# Import the code for the dialog
from .CreationMap_dialog import CreationMapDialog
import os.path


class CreationMap:
    """QGIS Plugin Implementation."""

    def __init__(self, iface):
        """Constructor.

        :param iface: An interface instance that will be passed to this class
            which provides the hook by which you can manipulate the QGIS
            application at run time.
        :type iface: QgsInterface
        """
        # Save reference to the QGIS interface
        self.iface = iface
        # initialize plugin directory
        self.plugin_dir = os.path.dirname(__file__)
        # initialize locale
        locale = QSettings().value('locale/userLocale')[0:2]
        locale_path = os.path.join(
            self.plugin_dir,
            'i18n',
            'CreationMap_{}.qm'.format(locale))

        if os.path.exists(locale_path):
            self.translator = QTranslator()
            self.translator.load(locale_path)
            QCoreApplication.installTranslator(self.translator)

        # Declare instance attributes
        self.actions = []
        self.menu = self.tr(u'&CreationMap')

        # Check if plugin was started the first time in current QGIS session
        # Must be set in initGui() to survive plugin reloads
        self.first_start = None

    # noinspection PyMethodMayBeStatic
    def tr(self, message):
        """Get the translation for a string using Qt translation API.

        We implement this ourselves since we do not inherit QObject.

        :param message: String for translation.
        :type message: str, QString

        :returns: Translated version of message.
        :rtype: QString
        """
        # noinspection PyTypeChecker,PyArgumentList,PyCallByClass
        return QCoreApplication.translate('CreationMap', message)


    def add_action(
        self,
        icon_path,
        text,
        callback,
        enabled_flag=True,
        add_to_menu=True,
        add_to_toolbar=True,
        status_tip=None,
        whats_this=None,
        parent=None):
        """Add a toolbar icon to the toolbar.

        :param icon_path: Path to the icon for this action. Can be a resource
            path (e.g. ':/plugins/foo/bar.png') or a normal file system path.
        :type icon_path: str

        :param text: Text that should be shown in menu items for this action.
        :type text: str

        :param callback: Function to be called when the action is triggered.
        :type callback: function

        :param enabled_flag: A flag indicating if the action should be enabled
            by default. Defaults to True.
        :type enabled_flag: bool

        :param add_to_menu: Flag indicating whether the action should also
            be added to the menu. Defaults to True.
        :type add_to_menu: bool

        :param add_to_toolbar: Flag indicating whether the action should also
            be added to the toolbar. Defaults to True.
        :type add_to_toolbar: bool

        :param status_tip: Optional text to show in a popup when mouse pointer
            hovers over the action.
        :type status_tip: str

        :param parent: Parent widget for the new action. Defaults None.
        :type parent: QWidget

        :param whats_this: Optional text to show in the status bar when the
            mouse pointer hovers over the action.

        :returns: The action that was created. Note that the action is also
            added to self.actions list.
        :rtype: QAction
        """

        icon = QIcon(icon_path)
        action = QAction(icon, text, parent)
        action.triggered.connect(callback)
        action.setEnabled(enabled_flag)

        if status_tip is not None:
            action.setStatusTip(status_tip)

        if whats_this is not None:
            action.setWhatsThis(whats_this)

        if add_to_toolbar:
            # Adds plugin icon to Plugins toolbar
            self.iface.addToolBarIcon(action)

        if add_to_menu:
            self.iface.addPluginToVectorMenu(
                self.menu,
                action)

        self.actions.append(action)

        return action

    def initGui(self):
        """Create the menu entries and toolbar icons inside the QGIS GUI."""

        icon_path = ':/plugins/CreationMap/icon.png'
        self.add_action(
            icon_path,
            text=self.tr(u'CreationMap'),
            callback=self.run,
            parent=self.iface.mainWindow())

        # will be set False in run()
        self.first_start = True


    def unload(self):
        """Removes the plugin menu item and icon from QGIS GUI."""
        for action in self.actions:
            self.iface.removePluginVectorMenu(
                self.tr(u'&CreationMap'),
                action)
            self.iface.removeToolBarIcon(action)
            
    def selectFileMunicipalities(self):
        """
        Sélectionne et défini le chemin du fichier des communes.

        Affiche une boîte de dialogue pour choisir un fichier shapefile des communes et met à jour le champ correspondant dans l'interface utilisateur.
        """
        self.dlg.lineMunicipality.clear()
        file_path, _ = QFileDialog.getOpenFileName(None, 'Sélectionner le fichier des communes', '', 'Shapefiles (*.shp)')
        self.dlg.lineMunicipality.setText(file_path)

    def selectFilePopulation(self):
        """
        Sélectionne et défini le chemin du fichier des populations.

        Affiche une boîte de dialogue pour choisir un fichier shapefile des populations et met à jour le champ correspondant dans l'interface utilisateur.
        """
        self.dlg.linePopulation.clear()
        file_path, _ = QFileDialog.getOpenFileName(None, 'Sélectionner le fichier des populations', '', 'Shapefiles (*.shp)')
        self.dlg.linePopulation.setText(file_path)

    def selectSave(self):
        """
        Sélectionne et défini le chemin de sauvegarde.

        Affiche une boîte de dialogue pour choisir un emplacement de sauvegarde et met à jour le champ correspondant dans l'interface utilisateur.
        """
        self.dlg.lineSave.clear()
        file_path, _ = QFileDialog.getSaveFileName(None, "Sélectionner l'emplacement de sauvegarde", '', 'Shapefiles (*.shp)')
        self.dlg.lineSave.setText(file_path)

    def getUniqueValues(self, layer):
        """
        Obtient les valeurs uniques d'une colonne spécifique dans une couche.

        :param layer: Couche pour laquelle obtenir les valeurs uniques.
        :type layer: QgsVectorLayer

        :return: Un ensemble des valeurs uniques de la colonne "region".
        :rtype: set

        En cas d'erreur, affiche une boîte de dialogue avec un message d'erreur.
        """
        self.dlg.comboBoxRegions.clear()
        uniqueValues = set()
        try:
            for feature in layer.getFeatures():
                value = feature["region"]
                uniqueValues.add(str(value))
            return uniqueValues
        except Exception as e:
            QMessageBox.critical(None, 'Erreur', "La colonne region n'existe pas")

    def selectFieldsMunicipality(self):
        """
        Sélectionne les champs de la couche des communes.

        Obtient les champs de la couche des communes à partir du chemin spécifié, puis met à jour les listes déroulantes correspondantes dans l'interface utilisateur.
        """
        self.dlg.comboBoxMunicipality.clear()
        path = self.dlg.lineMunicipality.text()
        if path:
            try:
                layer = QgsVectorLayer(path, 'temporary_layer', 'ogr')
                if layer.isValid():
                    self.dlg.comboBoxMunicipality.setLayer(layer)
                    self.dlg.comboBoxMunicipality.setFields(layer.fields())
                    self.dlg.comboBoxRegions.addItems(self.getUniqueValues(layer))
                else:
                    QMessageBox.critical(None, 'Erreur', 'Impossible d\'ouvrir le fichier shapefile.')
            except Exception as e:
                QMessageBox.critical(None, 'Erreur', f'Erreur lors de l\'ouverture du fichier shapefile : {str(e)}')

    def selectFieldsPopulation(self):
        """
        Sélectionne les champs de la couche des populations.

        Obtient les champs de la couche des populations à partir du chemin spécifié, puis met à jour la liste déroulante correspondante dans l'interface utilisateur.
        """
        self.dlg.comboBoxPopulation.clear()
        path = self.dlg.linePopulation.text()
        if path:
            try:
                layer = QgsVectorLayer(path, 'temporary_layer', 'ogr')
                if layer.isValid():
                    self.dlg.comboBoxPopulation.setLayer(layer)
                    self.dlg.comboBoxPopulation.setFields(layer.fields())
                else:
                    QMessageBox.critical(None, 'Erreur', 'Impossible d\'ouvrir le fichier shapefile.')
            except Exception as e:
                QMessageBox.critical(None, 'Erreur', f'Erreur lors de l\'ouverture du fichier shapefile : {str(e)}')

    def creationDensityLayer(self):
        """
        Crée la carte de densité en effectuant une série de traitements.

        Charge les couches, effectue une jointure attributaire, calcule la densité, applique une symbologie graduée, crée des centroïdes, change la projection, et enregistre les couches résultantes.
        """
        try:
            # Permet de redéfinir le système de coordonnée du projet en EPSG:3857
            # Ce système a pour unité de mesure le mètres ce qui facilite les calculs
            QgsProject.instance().setCrs(QgsCoordinateReferenceSystem('EPSG:3857'))
            QgsProject.instance().read(QgsProject.instance().fileName())

            # Sélections des données
            join_layer = CreateDensity.joinItems(self.dlg)
            selected_layer = CreateDensity.selectRegions(self.dlg, join_layer)

            # Calcul de la densité et application d'une symbologie graduée
            result = CreateDensity.calculateDensity(selected_layer)
            Affichage.applyGraduatedSymbology(result)
            Affichage.changeCRS(result)
            
            # Calcul des centroides
            centroid = Centroides.createCentroids(result)
            Affichage.changeCRS(centroid)
            
            # Sauvegarde des fichiers
            Affichage.saveLayer(result, "Résultat Densité", self.dlg.lineSave.text())
            Affichage.saveLayer(centroid, "Résultat centroïdes", self.dlg.lineSave.text().replace('.shp', '_centroid.shp'))

        except Exception as e:
            QMessageBox.critical(None, 'Erreur', f'Erreur lors de la création de la carte de densité : {str(e)}')

    def run(self):
        """
        Méthode principale qui effectue tous les traitements.

        Crée la boîte de dialogue avec les éléments, initialise l'interface utilisateur, affiche la boîte de dialogue, et exécute les traitements en cas de confirmation.
        """
        if self.first_start == True:
            self.first_start = False
            self.dlg = CreationMapDialog()

            self.dlg.comboBoxMunicipality.clear()
            self.dlg.comboBoxPopulation.clear()
            self.dlg.comboBoxRegions.clear()

            self.dlg.lineMunicipality.clear()
            self.dlg.linePopulation.clear()
            self.dlg.lineSave.clear()

            # Mise à jour des champs et des valeurs dès que le fichier sélectionné change
            self.dlg.buttMunicipality.clicked.connect(self.selectFileMunicipalities)
            self.dlg.buttPopulation.clicked.connect(self.selectFilePopulation)
            self.dlg.buttSave.clicked.connect(self.selectSave)

        self.dlg.lineMunicipality.textChanged.connect(self.selectFieldsMunicipality)
        self.dlg.linePopulation.textChanged.connect(self.selectFieldsPopulation)
        self.dlg.show()
        
        # Appuie sur le bouton "OK"
        result = self.dlg.exec_()
        if result:
            self.creationDensityLayer()